{"version":3,"sources":["components/FirstTask.jsx","components/SecondTask.jsx","App.js","reducers/index.js","index.js"],"names":["DATA_URL","SHOW_LIST","FirestTask","dispatch","useDispatch","React","useState","columnDefs","setColumnDefs","rowData","setRowData","gridApi","setGridApi","openAddUser","setOpenAddUser","userData","setUserData","showSelect","setShowSelect","showTicket","setShowTicket","showTicketsList","useSelector","state","showTickets","sortable","flex","defaultColDef","handelInputChange","e","persist","target","name","Number","value","useEffect","Axios","get","then","res","data","catch","err","console","log","field","unSortIcon","selsctShow","map","show","i","MenuItem","key","style","width","height","display","flexDirection","marginBottom","Card","CardActions","disableSpacing","Button","onClick","applyTransaction","remove","getSelectedRows","forEachNode","node","push","post","onRemoveSelected","Collapse","in","timeout","unmountOnExit","CardContent","justifyContent","TextField","autoFocus","label","onChange","FormControl","InputLabel","id","Select","displayEmpty","inputProps","FormHelperText","type","InputProps","min","max","onKeyDown","event","preventDefault","tickets","newData","date","moment","format","add","changeTickets","payload","addItems","flexGrow","className","rowSelection","animateRows","onGridReady","params","api","SecendTask","props","App","showData","initialState","maxTickets","ticketsSold","setTicketsNumber","findIndex","obj","store","createStore","action","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.f584ebcb.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport {\r\n  MenuItem,\r\n  Button,\r\n  CardContent,\r\n  CardActions,\r\n  Collapse,\r\n  Card,\r\n  TextField,\r\n  Select,\r\n  InputLabel,\r\n  FormHelperText,\r\n  FormControl,\r\n} from '@material-ui/core';\r\n\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst DATA_URL='https://servergrid.herokuapp.com/';\r\nconst SHOW_LIST = [\"Hamilton\",\"Mika\",\"K's choice\",\"Amanda Palmer\"];\r\n\r\nexport default function FirestTask(){\r\n  const dispatch = useDispatch();\r\n  const [columnDefs,setColumnDefs] = React.useState();\r\n  const [rowData,setRowData] = React.useState();\r\n  const [gridApi,setGridApi] = React.useState();\r\n  const [openAddUser,setOpenAddUser] = React.useState(false);\r\n  const [userData,setUserData] = React.useState({});\r\n  const [showSelect , setShowSelect] = React.useState('');\r\n  const [showTicket ,setShowTicket] = React.useState('');\r\n  const showTicketsList = useSelector(state=>state.showTickets)\r\n  \r\n  const [defaultColDef] = React.useState({\r\n    sortable: true,\r\n    flex:1\r\n  })\r\n\r\n  const handelInputChange = e =>{\r\n    e.persist();\r\n    if(e.target.name===\"tickets\"){\r\n      setUserData(userData=>({...userData,[e.target.name]:Number(e.target.value)}))\r\n    }\r\n    setUserData(userData=>({...userData,[e.target.name]:e.target.value}))\r\n  }\r\n\r\n  const handleShowChange = e=>{\r\n    e.persist();\r\n    setShowSelect(e.target.value)\r\n    setShowTicket(showTicketsList[e.target.value])\r\n  }\r\n\r\n  useEffect(()=>{\r\n    Axios.get(DATA_URL)\r\n      .then((res)=>{\r\n        setRowData(res.data)\r\n      })\r\n      .catch((err)=>{\r\n        console.log(err)\r\n    })\r\n\r\n    const columnCountData=[\r\n      { field: 'name' ,sortable: true},\r\n      { field: 'date' ,sortable: true},\r\n      { field: 'show' ,sortable: true},\r\n      { field: 'tickets' ,unSortIcon: true},\r\n    ];\r\n    setColumnDefs(columnCountData);\r\n  },[])\r\n\r\n  const handleExpandClick = () => {\r\n    setOpenAddUser(!openAddUser);\r\n  };\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n  };\r\n\r\n  const addItems = () => {\r\n    let newData = {\r\n      name: userData.name||\"no data\",\r\n      date: moment().format('DD/MM/YYYY'),\r\n      show: showSelect,\r\n      tickets: userData.tickets||\"no data\",\r\n    };\r\n\r\n    Axios.post(DATA_URL+\"postUserData\",newData)\r\n      .then((res)=>{\r\n        console.log(res.data)\r\n      })\r\n      .catch((err)=>{\r\n        console.log(err)\r\n      })\r\n\r\n    gridApi.applyTransaction({add:[newData]});\r\n    \r\n    if(newData.tickets!=='no data'){\r\n      const changeTickets= {\r\n        name:newData.show,\r\n        tickets:newData.tickets\r\n      }\r\n      console.log(\"firest step\",changeTickets)\r\n      dispatch({\r\n        type:'UPDATE_TICKET',\r\n        payload:changeTickets\r\n      })\r\n    }\r\n  };\r\n\r\n  const onRemoveSelected = () => {\r\n    const rowData=[];\r\n    gridApi.applyTransaction({ remove: gridApi.getSelectedRows() });\r\n    \r\n    gridApi.forEachNode(function(node) {\r\n      rowData.push(node.data);\r\n    });\r\n\r\n    Axios.post(DATA_URL+\"removeUserData\",rowData)\r\n      .then((res)=>{\r\n      })\r\n      .catch((err)=>{\r\n        console.log(err)\r\n      })\r\n  };\r\n\r\n  const selsctShow = SHOW_LIST.map((show,i)=>{\r\n    return <MenuItem key={i} value={show}>{show}</MenuItem >\r\n  })\r\n\r\n  return(\r\n    <div style={{ width: 700, height: '100%' }}>\r\n        <div\r\n          style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n        >\r\n          <div style={{ marginBottom: '4px' }}>\r\n            <Card >\r\n              <CardActions disableSpacing>\r\n                <Button onClick={handleExpandClick}>Add Items</Button>\r\n                <Button onClick={() => onRemoveSelected()}>Remove Selected</Button>\r\n              </CardActions>\r\n              <Collapse in={openAddUser} timeout=\"auto\" unmountOnExit>\r\n                <CardContent style={{display:'flex',justifyContent:'space-between'}}>\r\n                  <TextField \r\n                    autoFocus={true} \r\n                    name=\"name\"\r\n                    label=\"Name\" \r\n                    onChange={handelInputChange}\r\n                    value={userData.name||''}\r\n                  />\r\n                  <FormControl>\r\n                    <InputLabel id=\"demo-simple-select-required-label\">Select Show</InputLabel>\r\n                    <Select\r\n                      style = {{width:165}}\r\n                      value={showSelect}\r\n                      onChange={handleShowChange}\r\n                      displayEmpty\r\n                      inputProps={{ 'aria-label': 'Without label' }}\r\n                    >\r\n                      {selsctShow} \r\n                    </Select>\r\n                    <FormHelperText>{showTicket!==''?showTicket:''}</FormHelperText>\r\n                  </FormControl>\r\n                  <TextField \r\n                    name=\"tickets\"\r\n                    label=\"Tickets\" \r\n                    type=\"number\"\r\n                    InputProps={{\r\n                      inputProps: { \r\n                        min: showTicket!==''?1:0,\r\n                        max: showTicket!==''?showTicket:0,\r\n                        onKeyDown: (event) => {\r\n                          event.preventDefault();\r\n                       },\r\n                      }\r\n                    }}\r\n                    value={userData.tickets||''}\r\n                    onChange={handelInputChange}\r\n                  />\r\n                  <Button onClick={() => addItems()}>Add</Button>\r\n                </CardContent>\r\n              </Collapse>\r\n            </Card>\r\n          </div>\r\n          <div style={{ flexGrow: '1' }}>\r\n            <div\r\n              id=\"myGrid\"\r\n              style={{\r\n                height: 400,\r\n                width: \"100%\",\r\n              }}\r\n              className=\"ag-theme-alpine\"\r\n            >\r\n              <AgGridReact\r\n                rowData={rowData}\r\n                columnDefs={columnDefs}\r\n                defaultColDef={defaultColDef}\r\n                rowSelection='multiple'\r\n                animateRows={true}\r\n                onGridReady={onGridReady}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\n\r\nexport default function SecendTask(props){\r\n  const { rowData } = props\r\n  const [columnDefs,setColumnDefs] = React.useState();\r\n  const [gridApi,setGridApi] = React.useState();\r\n\r\n  \r\n  const [defaultColDef] = React.useState({\r\n    sortable: true,\r\n    flex:1\r\n  })\r\n\r\n\r\n  useEffect(()=>{\r\n    const columnCountData=[\r\n      { field: 'name' ,sortable: true},\r\n      { field: 'maxTickets' ,sortable: true},\r\n      { field: 'ticketsSold' ,sortable: true},\r\n    ];\r\n    setColumnDefs(columnCountData);\r\n  },[])\r\n\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n  };\r\n\r\n  console.log(rowData)\r\n\r\n  return(\r\n    <div style={{ width: 700, height: '100%' }}>\r\n        <div\r\n          style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n        >\r\n          <div style={{ flexGrow: '1' }}>\r\n            <div\r\n              id=\"myGrid\"\r\n              style={{\r\n                height: 400,\r\n                width: \"100%\",\r\n              }}\r\n              className=\"ag-theme-alpine\"\r\n            >\r\n              <AgGridReact\r\n                rowData={rowData}\r\n                columnDefs={columnDefs}\r\n                defaultColDef={defaultColDef}\r\n                rowSelection='multiple'\r\n                animateRows={true}\r\n                onGridReady={onGridReady}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport FirstTask from './components/FirstTask';\nimport SecendTask from './components/SecondTask.jsx'\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n  const showData = useSelector(state=>state.showTickets)\n  return (\n    <div >\n      <FirstTask/>\n      <SecendTask rowData={showData}/>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {  \r\n  showTickets:[\r\n    {\r\n      name:\"Hamilton\",\r\n      maxTickets:200,\r\n      ticketsSold:0\r\n    },\r\n    {\r\n      name:\"Mika\",\r\n      maxTickets:150,\r\n      ticketsSold:0\r\n    },\r\n    {\r\n      name:\"K's choice\",\r\n      maxTickets:100,\r\n      ticketsSold:0\r\n    },\r\n    {\r\n      name:\"Amanda Palmer\",\r\n      maxTickets:200,\r\n      ticketsSold:0\r\n    },\r\n  ]\r\n};\r\n\r\nexport default function reducer (state=initialState,action:any){\r\n  switch(action.type){\r\n    case\"UPDATE_TICKET\":\r\n      setTicketsNumber(action.payload.name,action.payload.tickets);\r\n      console.log(state)\r\n      return state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst setTicketsNumber =(name,tickets)=>{\r\n  const i = initialState.showTickets.findIndex(obj=>obj.name===name);\r\n  initialState.showTickets[i].ticketsSold=Number(initialState.showTickets[i].ticketsSold + tickets);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers/index';\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <App />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}